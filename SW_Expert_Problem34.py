# 문제 : 금속막대
# 원형 금속 막대를 가장 길게 연결하고자 한다. 원형 금속 막대는 한 쪽 면에 수나사와 다른 쪽에 암나사로 이루어져 있다.
# 수나사와 암나사는 굵기가 서로 다르다. 아래 그림에서 수나사의 굵기는 3을 암나사의 굵기는 4를 나타내고 있다.
# 이후 나사의 굵기를 수나사의 굵기 x 암나사의 굵기로 표현한다. 연결은 +로 표현한다.
# 이와 같은 원형 금속 막대를 연결하기 위해서는 수나사의 굵기와 암나사의 굵기가 서로 일치해야 한다.
# 예를 들어 두 개의 원형 금속 막대 3x4와 4x5가 있을 때 3x4+4x5로 연결해야 연결되며 4x5+3x4로 연결하면 연결되지 않는다.
# 수나사와 암나사의 크기가 서로 다른 여러 개의 원형 금속 막대를 가장 많이 연결하려고 한다.
# 어떤 순서로 연결해야 가장 많이 연결하는지를 찾는 프로그램을 작성하시오.
# [입력]
# 맨 첫 줄에는 테스트 케이스의 개수가 주어진다.
# 그리고 테스트 케이스가 각 라인에 주어진다. 각 테스트 케이스는 2줄로 구성되며, 첫 줄에는 원형 금속 막대의 개수 n이 주어지고, 다음 줄에는 2n개의 수가 주어진다.
# 숫자는 공백으로 구분한다. 앞에서부터 2개씩 하나의 원형 금속 막대의 수나사 굵기와 암나사 굵기를 의미한다.
# 10
# 3
# 3 4 2 3 4 5
# 4
# 1 2 5 1 2 4 4 3
# 6
# 1 2 2 3 8 1 3 7 5 8 9 5
# 10
# 1 8 2 5 11 1 12 2 5 6 8 4 6 9 4 15 9 10 10 11
# 8
# 1 6 10 2 2 15 6 11 7 14 11 10 17 7 15 17
# 10
# 1 10 16 1 7 4 4 18 11 7 6 16 18 6 12 11 15 12 13 15
# 13
# 1 13 6 3 19 1 3 12 12 4 8 6 4 14 7 11 15 8 14 10 11 15 10 19 13 20
# 15
# 2 1 3 4 1 22 4 13 8 9 25 3 12 8 9 11 10 17 15 12 13 15 11 18 22 10 18 23 17 25
# 18
# 8 2 3 7 4 10 15 3 9 6 14 4 11 8 7 16 6 21 16 9 10 17 21 14 27 11 17 18 18 20 26 15 20 23 23 27
# 20
# 2 1 13 2 5 6 4 13 14 5 6 15 25 4 9 16 21 8 12 14 16 11 22 9 20 10 10 21 8 29 11 25 15 22 30 12 29 28 28 30
# [출력]
# #1 2 3 3 4 4 5
# #2 5 1 1 2 2 4 4 3
# #3 9 5 5 8 8 1 1 2 2 3 3 7
# #4 12 2 2 5 5 6 6 9 9 10 10 11 11 1 1 8 8 4 4 15
# #5 1 6 6 11 11 10 10 2 2 15 15 17 17 7 7 14
# #6 13 15 15 12 12 11 11 7 7 4 4 18 18 6 6 16 16 1 1 10
# #7 7 11 11 15 15 8 8 6 6 3 3 12 12 4 4 14 14 10 10 19 19 1 1 13 13 20
# #8 2 1 1 22 22 10 10 17 17 25 25 3 3 4 4 13 13 15 15 12 12 8 8 9 9 11 11 18 18 23
# #9 26 15 15 3 3 7 7 16 16 9 9 6 6 21 21 14 14 4 4 10 10 17 17 18 18 20 20 23 23 27 27 11 11 8 8 2
# #10 20 10 10 21 21 8 8 29 29 28 28 30 30 12 12 14 14 5 5 6 6 15 15 22 22 9 9 16 16 11 11 25 25 4 4 13 13 2 2 1
# 각 테스트 케이스 각각에 대한 답을 출력한다.
# 각 줄은 ‘#x’로 시작하고 공백을 하나 둔 다음, 각 테스트 케이스에 주어진 수열로부터 가장 많이 연결하기 위한 원형 금속 막대의 수나사 굵기와 암나사 굵기를 순서대로 출력한다.

def dfs(x):
    global temp2
    global result
    for i in range(N):
        if vis[i] == 1 or graph[i][0] != x:
            continue
        vis[i] = 1
        temp2.append((graph[i][0],graph[i][1]))
        dfs(graph[i][1])
    if len(temp2) > len(result):
        result = temp2
        return


for _ in range(int(input())):
    N = int(input())
    temp = list(map(int,input().split()))
    graph = []
    result = []
    for i in range(0,N*2,2):
        A,B = temp[i],temp[i+1]
        graph.append((A,B))
    for i in range(N):
        vis = [0] * N
        vis[i] = 1
        temp2 = []
        temp2.append((graph[i][0],graph[i][1]))
        dfs(graph[i][1])
        vis[i] = 0
    for i,j in result:
        print(i, j,end=' ')
    print()
