# 문제 : 최적 경로
# 삼성전자의 서비스 기사인 김대리는 회사에서 출발하여 냉장고 배달을 위해 N명의 고객을 방문하고 자신의 집에 돌아가려한다.
# 회사와 집의 위치, 그리고 각 고객의 위치는 이차원 정수 좌표 (x, y)로 주어지고 (0 ≤ x ≤ 100, 0 ≤ y ≤ 100)
# 두 위치 (x1, y1)와 (x2, y2) 사이의 거리는 |x1-x2| + |y1-y2|으로 계산된다.
# 여기서 |x|는 x의 절대값을 의미하며 |3| = |-3| = 3이다. 회사의 좌표, 집의 좌표, 고객들의 좌표는 모두 다르다.
# 회사에서 출발하여 N명의 고객을 모두 방문하고 집으로 돌아오는 경로 중 가장 짧은 것을 찾으려 한다.
# 회사와 집의 좌표가 주어지고, 2명에서 10명 사이의 고객 좌표가 주어질 때,
# 회사에서 출발해서 이들을 모두 방문하고 집에 돌아가는 경로 중 총 이동거리가 가장 짧은 경로를 찾는 프로그램을 작성하라.
# 여러분의 프로그램은 가장 짧은 경로의 이동거리만 밝히면 된다.
# 이 문제는 가장 짧은 경로를 ‘효율적으로’ 찾는 것이 목적이 아니다.
# 여러분은 모든 가능한 경로를 살펴서 해를 찾아도 좋다.
# 모든 경우를 체계적으로 따질 수 있으면 정답을 맞출 수 있다.
# [제약사항]
# 고객의 수 N은 2≤N≤10 이다.
# 그리고 회사의 좌표, 집의 좌표를 포함한 모든 N+2개의 좌표는 서로 다른 위치에 있으며 좌표의 값은 0이상 100 이하의 정수로 이루어진다.
# [입력]
# 가장 첫줄은 전체 테스트케이스의 수이다.
# 이후, 두 줄에 테스트 케이스 하나씩이 차례로 주어진다.
# 각 테스트 케이스의 첫째 줄에는 고객의 수 N이 주어진다. 둘째 줄에는 회사의 좌표,집의 좌표, N명의 고객의 좌표가 차례로 나열된다.
# 좌표는 (x,y)쌍으로 구성되는데 입력에서는 x와 y가 공백으로 구분되어 제공된다.
# 10
# 5
# 0 0 100 100 70 40 30 10 10 5 90 70 50 20
# 6
# 88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14
# 7
# 22 47 72 42 61 93 8 31 72 54 0 64 26 71 93 87 84 83
# 8
# 30 20 43 14 58 5 91 51 55 87 40 91 14 55 28 80 75 24 74 63
# 9
# 3 9 100 100 16 52 18 19 35 67 42 29 47 68 59 38 68 81 80 37 94 92
# 10
# 39 9 97 61 35 93 62 64 96 39 36 36 9 59 59 96 61 7 64 43 43 58 1 36
# 10
# 26 100 72 2 71 100 29 48 74 51 27 0 58 0 35 2 43 47 50 49 44 100 66 96
# 10
# 46 25 16 6 48 82 80 21 49 34 60 25 93 90 26 96 12 100 44 69 28 15 57 63
# 10
# 94 83 72 42 43 36 59 44 52 57 34 49 65 79 14 20 41 9 0 39 100 94 53 3
# 10
# 32 79 0 0 69 58 100 31 67 67 58 66 83 22 44 24 68 3 76 85 63 87 7 86
# [출력]
# #1 200
# #2 304
# #3 265
# #4 307
# #5 306
# #6 366
# #7 256
# #8 399
# #9 343
# #10 391
# 총 10줄에 10개의 테스트 케이스 각각에 대한 답을 출력한다.
# 각 줄은 ‘#x’로 시작하고 공백을 하나 둔 다음 최단 경로의 이동거리를 기록한다. 여기서 x는 테스트 케이스의 번호다.

def heuristic(now_po,next_po):
    x = abs(now_po[0]-next_po[0])
    y = abs(now_po[1]-next_po[1])
    return x+y

def backtracking(level,x,y,value):
    global comp_x,comp_y,house_x,house_y,result
    if level == N:
        result = min(result,value+(heuristic((x,y),(house_x,house_y))))
        return
    for i in range(N):
        if vis[i] == 1:
            continue
        vis[i] = 1
        backtracking(level+1,graph[i][0],graph[i][1],value+(heuristic((x,y),(graph[i][0],graph[i][1]))))
        vis[i] = 0

for _ in range(int(input())):
    N = int(input())
    result = 1e9
    temp = list(map(int,input().split()))
    graph = []
    vis = [0]*N
    comp_x,comp_y = temp[0],temp[1]
    house_x,house_y = temp[2],temp[3]
    for i in range(4,len(temp),2):
        x,y = temp[i],temp[i+1]
        graph.append((x,y))
    backtracking(0,comp_x,comp_y,0)
    print(result)